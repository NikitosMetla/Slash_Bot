import asyncio

from aiogram import Router, types, Bot, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import design_bot
from data.statistic import Statistic
from data.keyboards import admin_keyboard, add_delete_admin, cancel_keyboard, choice_bot_stat, \
    back_to_bots_keyboard
from db.repository import admin_repository, users_repository
from settings import InputMessage
from utils.is_main_admin import is_main_admin
from utils.list_admins_keyboard import Admins_kb

admin_router = Router()


@admin_router.message(F.video_note, any_state)
@is_main_admin
async def admin_cancel(message: types.Message, state: FSMContext, bot: Bot):
    print(message.video_note.file_id)


@admin_router.message(F.photo, any_state)
@is_main_admin
async def admin_cancel(message: types.Message, state: FSMContext, bot: Bot):
    print(message.photo[-1].file_id)


@admin_router.callback_query(Text(text="cancel"), any_state)
@is_main_admin
async def admin_cancel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=admin_keyboard)
    await call.message.delete()


@admin_router.callback_query(Text(startswith="answer_user|"), any_state)
@is_main_admin
async def admin_cancel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    call_data = call.data.split("|")
    user_id = call_data[1]
    username = call_data[2]
    await call.message.edit_reply_markup()
    await call.message.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id: {user_id}, username: @{username}")
    await state.set_state(InputMessage.answer_to_user)
    await state.update_data(user_id=user_id, username=username)


@admin_router.message(F.text, InputMessage.answer_to_user)
@is_main_admin
async def admin_cancel(message: types.Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    text_to_user = (f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã,"
                    f" —Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: @{message.from_user.username}")
    await design_bot.send_message(chat_id=state_data.get("user_id"), text=text_to_user)
    await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    await state.clear()



@admin_router.callback_query(Text(text="back_to_bots"), InputMessage.statistic)
@is_main_admin
async def admin_cancel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüìä",
                                 reply_markup=choice_bot_stat.as_markup())


@admin_router.callback_query(Text(text="back_to_bots"))
@is_main_admin
async def admin_cancel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É‚úâÔ∏è",
                                 reply_markup=choice_bot_stat.as_markup())


@admin_router.message(Text(text="/start"), any_state)
@is_main_admin
async def admin_start(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.delete()
    await message.answer(text="–≠—Ç–æ –ê–¥–º–∏–Ω –±–æ—Ç –¥–ª—è —Å—Ç—É–¥–∏–∏ –í–∞–π—Ç. –° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ"
                              " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–ø–∞–≤—à–∏–º –≤ –≤–æ—Ä–æ–Ω–∫—É, –∞ —Ç–∞–∫–∂–µ –¥–µ–ª–∞—Ç—å"
                              " –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–ºü§ñ", reply_markup=admin_keyboard)


@admin_router.message(Text(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
@is_main_admin
async def choice_bot_for_stat(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await state.set_state(InputMessage.statistic)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüìä",
                         reply_markup=choice_bot_stat.as_markup())


@admin_router.callback_query(Text(startswith="mailing|"), InputMessage.statistic)
@is_main_admin
async def get_stat(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    service_name = call.data.split("|")[1]
    # user = Users(call.from_user.id, filename)
    # await user.read_data()
    stat = Statistic(service_name=service_name)
    await stat.get_users()
    stat_day, stat_month = await stat.get_statistic_by_timedelta(time_delta=1), await stat.get_statistic_by_timedelta(time_delta=30)
    stat_all = await stat.get_all_statistic()
    if service_name == "design_level" or service_name == "earnings_level":
        text_message = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: <b>{stat_day[0]}</b>, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö <b>{stat_day[1]}</b> –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å \n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: <b>{stat_month[0]}</b>, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö <b>{stat_month[1]}</b> –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{stat_all[0]}</b>, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö <b>{stat_all[1]}</b> –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å")
    elif service_name == "operations_data":
        text_message = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: <b>{stat_day[0]}</b>, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö <b>{stat_day[1]}</b> –±—ã–ª–∏ –æ–ø–ª–∞—á–µ–Ω—ã\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: <b>{stat_month[0]}</b>, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö <b>{stat_month[1]}</b> –±—ã–ª–∏ –æ–ø–ª–∞—á–µ–Ω—ã\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{stat_all[0]}</b>, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö <b>{stat_all[1]}</b> –±—ã–ª–∏ –æ–ø–ª–∞—á–µ–Ω—ã")
    else:
        text_message = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: <b>{stat_day[0]}</b>\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: <b>{stat_month[0]}</b>\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è <b>{stat_all[0]}</b>")
    await call.message.edit_text(text=text_message,
                                 reply_markup=back_to_bots_keyboard.as_markup())


@admin_router.message(Text(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
@is_main_admin
async def new_mailing(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    message = await message.answer(text="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–æ—à–ª–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                                   reply_markup=cancel_keyboard.as_markup())
    await state.set_state(InputMessage.enter_message_mailing)
    await state.update_data(message_id=message.message_id)


@admin_router.message(F.text, InputMessage.enter_message_mailing)
@is_main_admin
async def enter_message_mailing(message: types.Message, state: FSMContext, bot: Bot):
    # if filename == "all_bots":
    state_data = await state.get_data()
    message_id = state_data.get("message_id")
    users = await users_repository.select_all_users()
    for user in users:
        try:
            await design_bot.send_message(chat_id=user.user_id, text=message.text)
        except:
            continue
    await message.answer(text="–í–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞", reply_markup=admin_keyboard)
    await bot.delete_message(message_id=message_id, chat_id=message.from_user.id)
    await state.clear()


@admin_router.message(Text(text="–î–æ–±–∞–≤–∏—Ç—å / —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
@is_main_admin
async def add_or_delete_admin(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=add_delete_admin.as_markup())


@admin_router.callback_query(Text(text="add_admin"))
@is_main_admin
async def enter_new_admin_id(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.edit_text(text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ telegram id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞! –£—á—Ç–∏,"
                                      " —á—Ç–æ —É –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∞—Ç —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º",
                                 reply_markup=cancel_keyboard.as_markup())
    await state.set_state(InputMessage.enter_admin_id)


@admin_router.callback_query(Text(text="delete_admin"))
@is_main_admin
async def delete_old_admin(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    keyboard = await Admins_kb().generate_list()
    await call.message.edit_text(text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å",
                                 reply_markup=keyboard.as_markup())


@admin_router.callback_query(Text(startswith="admin|"))
@is_main_admin
async def actions_admin(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    admin_id = call.data.split("|")[1]
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"delete|{admin_id}"))
    keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel"))
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–º–∏–Ω–æ–º!",
                                 reply_markup=keyboard.as_markup())


@admin_router.callback_query(Text(startswith="delete|"))
@is_main_admin
async def choice_delete_admin(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    admin_id = call.data.split("|")[1]
    await admin_repository.delete_admin_by_admin_id(int(admin_id))
    await call.message.answer(text=f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É–¥–∞–ª–∏–ª–∏ –∞–¥–Ω–∏–º–∞ —Å telegram id {admin_id},"
                                   f" –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!", reply_markup=admin_keyboard)
    await call.message.delete()


@admin_router.message(F.text, InputMessage.enter_admin_id)
@is_main_admin
async def add_mew_admin(message: types.Message, state: FSMContext, bot: Bot):
    try:
        message_admin = await bot.send_message(chat_id=message.text, text="–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –∫–∞–∫ –∞–¥–º–∏–Ω–∞!")
        await admin_repository.add_admin(admin_id=int(message.text), username=message_admin.chat.username)
        await message.answer(text="–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞!", reply_markup=admin_keyboard)
        await message.delete()
        await state.clear()
    except:
        await message.answer(text="–î–∞–Ω–Ω–æ–≥–æ telegram id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º, —É–±–µ–¥–∏—Ç–µ—Å—å"
                                  " –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                             reply_markup=cancel_keyboard.as_markup())
