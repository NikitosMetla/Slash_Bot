import asyncio
import datetime
import io

from aiogram import Router, Bot, types, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.keyboards import keyboard_for_pay
from db.repository import operation_repository, users_repository, ai_requests_repository, ai_recommendations_repository
from settings import InputMessage
from utils.is_subscriber import is_subscriber
from utils.payment_for_services import create_payment, check_payment
from utils.rating_chat_gpt import RatingChatGpt

chat_gpt_router = Router()


@chat_gpt_router.callback_query(Text(startswith="ai_recommendation|"), any_state)
@chat_gpt_router.callback_query(Text(startswith="rofl_recommendation|"), any_state)
@is_subscriber
async def user_start_objective(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    delete_message_id = int(message.data.split("|")[1])
    await bot.delete_message(chat_id=message.from_user.id, message_id=delete_message_id)
    await message.message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Ä–µ–±—è—Ç–∞–º–∏ –∏–∑ –°–ª–µ—à. –°–ª–µ—à ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç –≤ –¥–∏–∑–∞–π–Ω–µ."
                                 " –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–æ–π—Ç–∏ –≤ –¥–∏–∑–∞–π–Ω, –∞ –µ—Å–ª–∏ —Ç—ã —É–∂–µ —Ç—É—Ç, —Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å"
                                 " –ó–ü –∏–ª–∏ –≥—Ä–µ–π–¥.\n\n–û–±–æ –≤—Å–µ–º –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –ø–æ—Å—Ç–µ ‚Äî> https://t.me/slashstudy/66")
    await asyncio.sleep(2)
    await message.message.answer("–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –∫ –±–æ—Ç—É")
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–ù–∞—á–Ω–µ–º!", callback_data="start_objective"))
    await message.message.answer("<b>–ù–µ–±–æ–ª—å—à–æ–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä</b>üîû\n\n–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                                 " –∫–∞—Ä—Ç–∏–Ω–∫—É. –ú—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ —Å—Å—ã–ª–∫–∏. –û—á–µ–Ω—å –≤–∞–∂–Ω–æ, —á—Ç–æ –≤–µ—â–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å"
                                 " –ø–æ–ª–∏—Ç–∏–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ª–∏—á–Ω–æ—Å—Ç—è–º–∏ –º—ã —Ç–∞–∫ –∂–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.",
                                 reply_markup=keyboard.as_markup())


@chat_gpt_router.callback_query(Text(text="start_objective"), any_state)
@is_subscriber
async def start_attempts_bot(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    user = await users_repository.get_user_by_user_id(message.from_user.id)
    # if user.attempts > 0:
    await message.message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!")
    await state.set_state(InputMessage.objective_ai_recommendation_state)
    await state.update_data(delete_messege_id=message.message.message_id)
    # else:
    #     payment = await create_payment()
    #     await operation_repository.add_operation(operation_id=payment[0], user_id=message.from_user.id, is_paid=False,
    #                                              url=payment[1])
    #     keyboard = await keyboard_for_pay(payment_id=payment[0], url=payment[1])
    #     await message.message.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ "–û—Ü–µ–Ω–∫–∏ –¥–∏–∑–∞–π–Ω–∞ —á–µ—Ä–µ–∑ Ai" –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ'
    #                                  '—Ç –∏–∑ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 250 —Ä—É–±–ª–µ–π.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞",'
    #                                      ' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂', reply_markup=keyboard.as_markup())
    await message.message.delete()


@chat_gpt_router.callback_query(Text(startswith="is_paid|"), any_state)
@is_subscriber
async def pay_attempts_bot(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = message.data.split("|")
    payment_id = data[1]
    user = await users_repository.get_user_by_user_id(message.from_user.id)
    if await check_payment(payment_id):
        await operation_repository.update_paid_by_operation_id(payment_id)
        await users_repository.give_attempts_by_user_id(user_id=message.from_user.id, attempts=10)
        await state.set_state(InputMessage.objective_ai_recommendation_state)
        if not user.donate:
            await users_repository.update_donate_by_user_id(user_id=message.from_user.id)
        my_message = await message.message.edit_text("–í—Å–µ –∫—Ä—É—Ç–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –∏ —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã 10 –∑–∞–ø—Ä–æ—Å–æ–≤"
                                                        " –∫ –Ω–∞—à–µ–º—É Ai —Å–µ—Ä–≤–∏—Å—É.\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        await state.update_data(delete_messege_id=my_message.message_id)
        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="start_menu"))
            await message.message.edit_reply_markup(reply_markup=keyboard.as_markup())
        finally:
            return
    else:
        try:
            payment = await operation_repository.get_operation_by_operation_id(payment_id)
            keyboard = await keyboard_for_pay(payment_id=payment_id, url=payment.url)
            await message.message.edit_text("–ü–æ–∫–∞ –º—ã –Ω–µ –≤–∏–¥–∏–º, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞( –ü–æ–≥–æ–¥–∏"
                                            " –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–±–µ–¥–∏—Å—å,"
                                            " —á—Ç–æ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–≤—è–∂–∏—Å—å"
                                            " —Å –Ω–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /contact_us –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ",
                                            reply_markup=keyboard.as_markup())
        finally:
            return


@chat_gpt_router.message(F.photo, InputMessage.objective_ai_recommendation_state)
@is_subscriber
async def get_photo_objective(message: types.Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    delete_message_id = state_data.get("delete_message_id")
    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=delete_message_id)
    except:
        print("Not_delete")
    user = await users_repository.get_user_by_user_id(message.from_user.id)
    # if user.attempts <= 0:
    #     payment = await create_payment()
    #     await operation_repository.add_operation(operation_id=payment[0], user_id=message.from_user.id, is_paid=False,
    #                                              url=payment[1])
    #     keyboard = await keyboard_for_pay(payment_id=payment[0], url=payment[1])
    #     await message.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ "–û—Ü–µ–Ω–∫–∏ –¥–∏–∑–∞–π–Ω–∞ —á–µ—Ä–µ–∑ Ai" –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ'
    #                                  '—Ç –∏–∑ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 250 —Ä—É–±–ª–µ–π.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞",'
    #                                  ' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂', reply_markup=keyboard.as_markup())
    #     return
    delete_message = await message.answer("–ü—Ä–∏–Ω—è–ª–∏ —Ç–≤–æ–π –¥–∏–∑–∞–π–Ω üé®. –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è≥, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
                                          " –∏ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.")
    photo_bytes_io = io.BytesIO()
    photo_id = message.photo[-1].file_id
    await bot.download(message.photo[-1], destination=photo_bytes_io)
    text = await RatingChatGpt(photo_bytes_io).assessment(True)
    if '–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É' in text:
        await ai_requests_repository.add_request(photo_id=photo_id, user_id=message.from_user.id, answer_ai=text)
        await bot.delete_message(message_id=delete_message.message_id, chat_id=message.from_user.id)
        await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–æ —ç—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –ü—Ä–∏—à–ª–∏ –¥—Ä—É–≥—É—é (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å)")
        await message.delete()
        return
    else:
        await ai_requests_repository.add_request(photo_id=photo_id, user_id=message.from_user.id, answer_ai=text)
        await message.answer(text=text)
        await bot.delete_message(message_id=delete_message.message_id, chat_id=message.from_user.id)
        await asyncio.sleep(2)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="start_menu"))
        await users_repository.delete_attempt_by_user_id(user_id=message.from_user.id)
        if user.donate:
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –µ—â–µ –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É üì∏, –∏ –Ω–∞—à–∞"
                                 f" Ai –º–æ–¥–µ–ª—å –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ.")
                                 # f" \n\n–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {user.attempts - 1} –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=keyboard.as_markup())
        else:
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –µ—â–µ –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É üì∏, –∏ –Ω–∞—à–∞"
                                 f" Ai –º–æ–¥–µ–ª—å –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ",
                                 reply_markup=keyboard.as_markup())
        user = await ai_recommendations_repository.get_user_by_user_id(user_id=message.from_user.id)
        if user is None:
            await ai_recommendations_repository.add_ai_recommendation(user_id=message.from_user.id,
                                                                      last_date_start=datetime.datetime.now())
        else:
            await ai_recommendations_repository.update_user_last_start_date_by_user_id(user_id=message.from_user.id)

